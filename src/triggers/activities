#!/bin/sh

# trigger program to log repo creation and push activities for repos that
# are visible in the gitweb. To be included in the ACCESS_2 and POST_CREATE
# triggers.

# Set ACTIVITIES_LOG_FILE in the RC file to point to the activities log file
# in a location that is writable by gitolite and readable by the gitweb. The
# log file does not need to exist.

# ----------------------------------------------------------------------
# skip if called from the POST_CREATE trigger by the perms command as a
# result of changing permissions on a wild repo
[ "$1" = "POST_CREATE" ] && [ "$4" = "perms" ] && exit 0;

# if run on VREF and not denied (counterintuitively 'DENIED by fallthru'
# indicates success for VREFs), stop here. Earlier run on non-VREF has
# already logged the activity.
[ "$1" = "ACCESS_2" ] && [ -z "`echo "$5" | grep -v ^VREF/`" ] \
    && [ -z "`echo "$6" | grep -v 'DENIED by fallthru$'`" ] && exit 0;

alf=`gitolite query-rc ACTIVITIES_LOG_FILE`
[ -z "$alf" ] && exit 0;

# ----------------------------------------------------------------------
# if the ACCESS_2 trigger denies access - indicated with a word DENIED in
# the arg-6(result) - stop here. If this was run on a VREF, erase a previously
# logged push (allowed by non-VREF ACCESS_2 run) with the same transaction id.
if [ "$1" = "ACCESS_2" ] && [ -z "`echo "$6" | grep -v DENIED`" ]; then
    [ -z "`echo "$5" | grep -v ^VREF/`" ] && sed -i "/^\"$GL_TID\"/d" $alf
    exit 0;
fi

# ----------------------------------------------------------------------
# only log activities for repos accessible by the gitweb special user
[ -z "`(
    gitolite access $2 gitweb R any | grep -v DENIED
    gitolite git-config -r $2 gitweb\\\.
    gitolite git-config $2 gitolite-options.gitweb
)`" ] && exit 0;

ts=`date +%s`

# default arguments matching the ACCESS_2 trigger
l_action="push"
l_repo="$2"
l_user="$3"
l_ref="${5#refs/heads/*}"
l_old="$7"
l_new="$8"

if [ "$1" = "POST_CREATE" ]; then
    l_action="create";
    [ "$4" = "fork" ] && l_action="fork";
    [ -z "$3" ] && l_user="admin";
fi

# ----------------------------------------------------------------------
# log activity into a plain log file, one record per line. Each line is
# 'almost' a JSON object to ease later processing.
echo "\"$GL_TID\" : {" \
    " \"timestamp\" : \"$ts\"," \
    " \"action\"    : \"$l_action\"," \
    " \"repo\"      : \"$l_repo\"," \
    " \"user\"      : \"$l_user\"," \
    " \"ref\"       : \"$l_ref\"," \
    " \"oldSha\"    : \"$l_old\"," \
    " \"newSha\"    : \"$l_new\" }" >>$alf 2>/dev/null

exit 0;
