#!/bin/sh

# trigger program to log repo creation and push activities for repos that
# are visible in the gitweb. Designed to be included in the ACCESS_2, POST_GIT
# and POST_CREATE triggers.

# ----------------------------------------------------------------------
# skip if called from the POST_CREATE trigger by the perms command as a
# result of changing permissions on a wild repo
[ "$1" = "POST_CREATE" ] && [ "$4" = "perms" ] && exit 0;

# if run on VREF and not denied (counterintuitively 'DENIED by fallthru'
# indicates success for VREFs), stop here. Earlier run on non-VREF has
# already logged the activity.
[ "$1" = "ACCESS_2" ] &&  [ -z "`echo "$5" | grep -v ^VREF/`" ] \
    &&  [ -z "`echo "$6" | grep -v 'DENIED by fallthru$'`" ] && exit 0;

ald=`gitolite query-rc ACTIVITIES_LOG_DIR`
[ -z "$ald" ] && exit 0;

alf="$ald/activities.log"

# ----------------------------------------------------------------------
# if the ACCESS_2 trigger denies access - indicated with a word DENIED in
# the arg-6(result) - stop here. If this was run on a VREF, erase a previously
# logged push (allowed by non-VREF ACCESS_2 run) with the same transaction id.
if [ "$1" = "ACCESS_2" ] && [ -z "`echo "$6" | grep -v DENIED`" ]; then
    [ -z "`echo "$5" | grep -v ^VREF/`" ] && sed -i "/^\"$GL_TID\"/d" $alf
    exit 0;
fi

# ----------------------------------------------------------------------
# distill a JSON format log for the webpart. This is unoptimal as we don't
# care if the log file has actually changed. Patches are welcome.
format_json_log() {
    nr=`gitolite query-rc ACTIVITIES_MAX_RECORDS`
    [ -z "$nr" ] && nr=20

    ajf="$ald/activities.json"

    # for the last nr entries, replace tid with line number (several entries
    # may have the same tid which is illegal for json), then put the rest of
    # json document bits in place (curly braces and commas)
    tail -n $nr $alf \
	| sed = | sed -e 'N; s/\n//' -e 's/^\([0-9]*\)"[0-9]*"/"\1"/' \
	| sed '$! s/$/,/' \
	| awk 'BEGIN { RS="#" }; { printf "{\n" $0 "}\n" }' >$ajf 2>/dev/null

    return 0;
}

# log distilled *after* all access checks done
[ "$1" = "POST_GIT" ] && format_json_log && exit 0;

# ----------------------------------------------------------------------
# only log activities for repos accessible by the gitweb special user
[ -z "`(
    gitolite access $2 gitweb R any | grep -v DENIED
    gitolite git-config -r $2 gitweb\\\.
    gitolite git-config $2 gitolite-options.gitweb
)`" ] && exit 0;

ts=`date +%s`

# default arguments matching the ACCESS_2 trigger
l_action="push"
l_repo="$2"
l_user="$3"
l_ref="${5#refs/heads/*}"
l_old="$7"
l_new="$8"

if [ "$1" = "POST_CREATE" ]; then
    l_action="create";
    [ "$4" = "fork" ] && l_action="fork";
    [ -z "$3" ] && l_user="admin";
fi

# ----------------------------------------------------------------------
# log activity into a plain log file, one record per line. Each line is
# 'almost' a JSON object to ease the distill procedure.
echo "\"$GL_TID\" : {" \
    " \"timestamp\" : \"$ts\"," \
    " \"action\"    : \"$l_action\"," \
    " \"repo\"      : \"$l_repo.git\"," \
    " \"user\"      : \"$l_user\"," \
    " \"ref\"       : \"$l_ref\"," \
    " \"oldSha\"    : \"$l_old\"," \
    " \"newSha\"    : \"$l_new\" }" >>$alf 2>/dev/null

# the fork command does not run POST_GIT trigger, so we must distill
# json log right here
[ "$1" = "POST_CREATE" ] && [ "$4" = "fork" ] && format_json_log;

exit 0;
